// GEOMETRY

double pi = 2*acos(0.0);

// 0.0001 is when it's small enough to be regarded as 0
double gcd(double x, double y) {
  return fabs(y) < 0.0001 ? x : gcd(y, fmod(x, y));
}

double dist(double x1, double y1, double x2, double y2) {
  return sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
}

// HUNGARIAN

 struct Match {
   int cost;
   vector<pair<int, int>> pairs;
   Match (int cost, vector<pair<int, int>> pairs) : cost(cost), pairs(pairs) {}
 };

 Match hungarian() {  // A must be 1-based
  // Given the cost matrix "vector<vector<int>> A {...};" (n x m) in O(mn^2 time)
  // Find the maximum matching "vector<pair<int,int>>result;" with all pairs
  // As well as total cost "int C;" with the minimum assignment cost.
  // http://zafar.cc/2017/7/19/hungarian-algorithm/
  vector<int> u(n + 1), v(m + 1), p(m + 1), way(m + 1);
  for (int i = 1; i <= n; ++i) {
    p[0] = i;
    int j0 = 0;
    vector<int> minv(m + 1, INF);
    vector<char> used(m + 1, false);
    do {
      used[j0] = true;
      int i0 = p[j0], delta = INF, j1;
      for (int j = 1; j <= m; ++j)
        if (!used[j]) {
          int cur = A[i0][j] - u[i0] - v[j];
          if (cur < minv[j])
            minv[j] = cur, way[j] = j0;
          if (minv[j] < delta)
            delta = minv[j], j1 = j;
        }
      for (int j = 0; j <= m; ++j)
        if (used[j])
          u[p[j]] += delta, v[j] -= delta;
        else
          minv[j] -= delta;
      j0 = j1;
    } while (p[j0] != 0);
    do {
      int j1 = way[j0];
      p[j0] = p[j1];
      j0 = j1;
    } while (j0);
  }

  vector<pair<int, int>> result;
  for (int i = 1; i <= m; ++i) {  // pair is {col, row}
    result.push_back(make_pair(p[i], i));
  }
  return Match(-v[0], result);
}

