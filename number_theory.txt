// NUMBER THEORY

int choose[MAXN][MAXN];
void get_choose() {
  REP(i, n + 1)
  choose[i][0] = 1;  // one way to choose 0
  REPN(i, n) {
    REPN(j, i) {
      choose[i][j] = (choose[i - 1][j - 1] + choose[i - 1][j]) % mod;
    }
  }
}

vi get_frqs(int x) {  // get frq of prime factors of x
  map<int, int> frq;
  vi res;
  while (true) {
    if (sieve[x] == 1) break;
    frq[sieve[x]]++, x /= sieve[x];
  }
  for (auto& p : frq) res.push_back(p.second);
  return res;
}

int sieve[MAXN];
void gen_sieve() {
  iota(sieve + 1, sieve + MAXN, 1);
  for (int p = 2; p * p <= m; p++) {
    if (sieve[p] != p) continue;  // not a prime
    for (int i = p * p; i <= m; i += p)
      sieve[i] = p;  // p is smallest pf of i
  }
}

int mod_div(long x, long y) { // divides x by y % mod
  return (x * inv(y)) % mod;
}

int inv(int x) {  // modular inverse of x % mod
  return dp[x] = binpow(x, mod - 2);
}

ll binpow(ll a, ll b) {   // a ^ b # % mod
  a %= mod;
  ll res = 1;
  while (b > 0) {
    if (b & 1)
      res = res * a % mod;
    a = a * a % mod;
    b >>= 1;
  }
  return res;
}


// ---- when the mod is smaller than the number we're working with -----------------

int factmod(int x) {  // modified factorial of x % mod, where every p that appeared as a factor --> 1
  int res = 1;
  while (x > 1) {
    if ((x / mod) % 2)
      res = mod - res;
    res = res * fact[x % mod] % mod;
    x /= mod;
  }
  return res;
}
int multiplicity_factorial(int x) {  // how many times does x appear as a factor in the modified factorial?
  int count = 0;
  do {
    x /= mod;
    count += x;
  } while (x);
  return count;
}
int choose(int x, int y) {  // x choose y % mod
  int mx = multiplicity_factorial(x), my = multiplicity_factorial(y), mxy = multiplicity_factorial(x - y), res = factmod(x) * factmod(y) * factmod(x - y);
  if (mx > my + mxy) {  // after % mod, it has a factor of mod, so it becomes 0 
    return 0;
  }
  return res % mod;
}


// ------------------------- end section ------------------------------------------

// get inverses / factorials

int invs[MAXN] = {1, 1}, fact[MAXN] = {1,1};
for (int i = 2; i < MAXN; ++i)
  invs[i] = mod - (mod / i) * invs[mod % i] % mod;
    
for (int i = 2; i < MAXN; ++i)
  fact[i] = (ll)fact[i - 1] * i % mod;
  
 

// least common multiple (ex. LCM of 18, 24 is 72)
long lcm(long a, long b) { return (a * b) / __gcd(a, b); }

// random double [lower,upper]
double fRand(double lower, double upper) {
  upper = std::nextafter(upper, std::numeric_limits<double>::max());
  std::uniform_real_distribution<double> unif(lower, upper);
  std::default_random_engine re;
  double a_random_double = unif(re);
  return a_random_double;
}

// random int
srand(time(NULL));
int r = rand() % range + 0;  // range is [inclusve,exclusive)



long getNextPalindrome(long a) {
  string s = to_string(a);
  int n = s.size(), i = (n + 1) / 2;
  while (--i >= 0)
    if (s[i] == '9')
      s[i] = s[n - i - 1] = '0';
    else
      break;
  if (i == -1) return a + 2;
  s[i]++;
  if (i != (n - i - 1)) s[n - i - 1]++;
  return stol(s);
}

// factorial
long factorial(int n) {
  return n ? factorial(n - 1) * n % (long)(1e9 + 7) : 1;
}

ll power(ll x, ll y) {  // x to y'th power, all modded
  ll t = 1;
  while (y != 0) {
    if (y % 2 == 1) t = t * x % mod;
    x = x * x % mod;
    y /= 2;
  }
  return t;
}
ll fact(int x) {  // factorial of x, all modded
  ll res = 1;
  while (x) res = (res * x--) % mod;
  return res;
}