// UNION FIND

memset(reps, -1, sizeof(reps)), fill_n(sizes,sizes+n, 1);

int find(int a) {
  if (reps[a] != -1) {
    return reps[a] = find(reps[a]);  // with path compression;
  }
  return a;
}

// union find with rank
int Rank [MAXN], reps[MAXN], sizes[MAXN];

// normal union find
void set_union(int a, int b) {
  int pa = find(a), pb = find(b);
  if (pa != pb) reps[pa] = pb;
}

// call as such: set_union_rank(find(a), find(b))
void set_union_rank(int pa, int pb) {  // with Rank
  if (pa == pb)
    return;
  if (Rank[pa] == Rank[pb])
    Rank[pa]++;  // tie-broke guaranteed
  if (Rank[pa] > Rank[pb])
    reps[pb] = pa, sizes[pa] += sizes[pb];
  else
    reps[pa] = pb, sizes[pb] += sizes[pa];
}



