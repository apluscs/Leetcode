// SUFFIX ARRAY

const int ALPHA = 256;

int n, frq[MAXN], lcp[MAXN];
string s; // make sure there's a $ at the start

vi suffix_array() {
  vector<int> p(n), c(n); // n = length of s
  // dbg(s);
  memset(frq, 0, sizeof(frq));
  REP(i, n)
  frq[s[i]]++;
  FOR(i, 1, ALPHA)
  frq[i] += frq[i - 1];
  REP(i, n)
  p[--frq[s[i]]] = i;  // p = ordered permutation of s
  c[p[0]] = 0;         // p[0] = index in s, c is class wrt original index
  int classes = 1;
  FOR(i, 1, n) {
    if (s[p[i]] != s[p[i - 1]]) classes++;
    c[p[i]] = classes - 1;  // c[i] = what class s[i] is
  }
  vector<int> pn(n), cn(n);
  for (int h = 0; (1 << h) < n; ++h) {
    for (int i = 0; i < n; i++) {
      pn[i] = p[i] - (1 << h);
      if (pn[i] < 0)
        pn[i] += n;
    }
    memset(frq, 0, sizeof(frq));
    for (int i = 0; i < n; i++)
      frq[c[pn[i]]]++;
    for (int i = 1; i < classes; i++)
      frq[i] += frq[i - 1];
    for (int i = n - 1; i >= 0; i--)
      p[--frq[c[pn[i]]]] = pn[i];
    classes = 1, cn[p[0]] = 0;
    // dbg(h);
    for (int i = 1; i < n; i++) {
      pair<int, int> cur = {c[p[i]], c[(p[i] + (1 << h)) % n]};
      pair<int, int> prev = {c[p[i - 1]], c[(p[i - 1] + (1 << h)) % n]};
      if (cur != prev)
        ++classes;
      cn[p[i]] = classes - 1;
    }
    c.swap(cn);
  }
  return p;  // p[i] = index of suffix that has order i
}

void lcps_construction(vi& p) { // calculate adjacent LCPs
  int rank[MAXN], k = 0;  // rank[i] = index of s[i] in suffs
  REP(i, n)
  rank[p[i]] = i;
  REP(i, n) {  // index in s
    if (rank[i] == n - 1) {
      k = 0;
      continue;
    }
    int j = p[rank[i] + 1];
    while (i + k < n && j + k < n && s[i + k] == s[j + k])
      k++;
    lcp[rank[i]] = k;  // lcp[i] = lcp of s[p[i]], s[p[i]+1]
    if (k) k--;
  }
}

